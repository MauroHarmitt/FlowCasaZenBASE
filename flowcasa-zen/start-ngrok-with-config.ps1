# üöÄ SCRIPT DE NGROK CON CONFIGURACI√ìN AUTOM√ÅTICA
# Este script inicia ngrok y actualiza autom√°ticamente la configuraci√≥n del frontend y backend

param(
    [int]$Port = 3000,
    [string]$Region = "sa"
)

# üé® Colores para la consola
$Host.UI.RawUI.ForegroundColor = "Cyan"
Write-Host "üöÄ Iniciando ngrok con configuraci√≥n autom√°tica..." -ForegroundColor BrightCyan
Write-Host ""

# üîç Verificar si ngrok est√° instalado
try {
    $ngrokVersion = ngrok version 2>$null
    if ($LASTEXITCODE -ne 0) {
        throw "ngrok no est√° instalado o no est√° en el PATH"
    }
    Write-Host "‚úÖ ngrok encontrado: $ngrokVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: ngrok no est√° instalado" -ForegroundColor Red
    Write-Host "   Instala ngrok desde: https://ngrok.com/download" -ForegroundColor Yellow
    exit 1
}

# üîç Verificar si el puerto est√° en uso
try {
    $portInUse = Get-NetTCPConnection -LocalPort $Port -ErrorAction SilentlyContinue
    if ($portInUse) {
        Write-Host "‚úÖ Puerto $Port est√° en uso (aplicaci√≥n corriendo)" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Puerto $Port no est√° en uso. Aseg√∫rate de que la aplicaci√≥n est√© corriendo" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  No se pudo verificar el puerto $Port" -ForegroundColor Yellow
}

Write-Host ""

# üöÄ Iniciar ngrok en segundo plano
Write-Host "üöÄ Iniciando ngrok en puerto $Port..." -ForegroundColor Cyan
$ngrokProcess = Start-Process -FilePath "ngrok" -ArgumentList "http", $Port, "--region", $Region -PassThru -WindowStyle Hidden

# ‚è≥ Esperar a que ngrok se inicie
Write-Host "‚è≥ Esperando a que ngrok se inicie..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

# üîç Verificar que ngrok est√© corriendo
try {
    $ngrokStatus = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -ErrorAction Stop
    if ($ngrokStatus.tunnels.Count -eq 0) {
        throw "No se encontraron t√∫neles activos"
    }
    Write-Host "‚úÖ ngrok iniciado correctamente" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: ngrok no se inici√≥ correctamente" -ForegroundColor Red
    Write-Host "   Verifica que el puerto 4040 est√© disponible" -ForegroundColor Yellow
    $ngrokProcess.Kill()
    exit 1
}

# üîÑ Actualizar configuraci√≥n autom√°ticamente
Write-Host ""
Write-Host "üîÑ Actualizando configuraci√≥n autom√°ticamente..." -ForegroundColor Cyan

try {
    # Ejecutar el script de actualizaci√≥n
    node update-ngrok-config.js
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Configuraci√≥n actualizada exitosamente" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Hubo problemas actualizando la configuraci√≥n" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Error ejecutando script de actualizaci√≥n: $_" -ForegroundColor Yellow
}

Write-Host ""

# üìã Mostrar informaci√≥n del t√∫nel
try {
    $tunnels = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels"
    $httpTunnel = $tunnels.tunnels | Where-Object { $_.config.addr -eq "http://localhost:$Port" -and $_.proto -eq "https" }
    
    if ($httpTunnel) {
        Write-Host "üéâ ¬°ngrok configurado exitosamente!" -ForegroundColor BrightGreen
        Write-Host ""
        Write-Host "üìã Informaci√≥n del t√∫nel:" -ForegroundColor Cyan
        Write-Host "   üåê URL P√∫blica: $($httpTunnel.public_url)" -ForegroundColor Green
        Write-Host "   üîß URL Backend: $($httpTunnel.public_url -replace '3000', '5000')" -ForegroundColor Green
        Write-Host "   üí≥ Webhook URL: $($httpTunnel.public_url)/api/webhooks/mercadopago" -ForegroundColor Green
        Write-Host ""
        Write-Host "üåê Interfaz web de ngrok: http://localhost:4040" -ForegroundColor Blue
        Write-Host ""
        Write-Host "‚ö†Ô∏è  IMPORTANTE:" -ForegroundColor Yellow
        Write-Host "   1. Reinicia el servidor backend para aplicar cambios de CORS" -ForegroundColor Yellow
        Write-Host "   2. La URL cambiar√° cada vez que reinicies ngrok" -ForegroundColor Yellow
        Write-Host "   3. Ejecuta este script cada vez que reinicies ngrok" -ForegroundColor Yellow
        Write-Host ""
        Write-Host "üõë Para detener ngrok, presiona Ctrl+C" -ForegroundColor Red
    } else {
        Write-Host "‚ö†Ô∏è  No se encontr√≥ t√∫nel HTTP para el puerto $Port" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  No se pudo obtener informaci√≥n del t√∫nel: $_" -ForegroundColor Yellow
}

# üîÑ Funci√≥n para actualizar configuraci√≥n cuando se detecten cambios
function UpdateConfigOnChange {
    param([string]$previousUrl)
    
    try {
        $tunnels = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels"
        $httpTunnel = $tunnels.tunnels | Where-Object { $_.config.addr -eq "http://localhost:$Port" -and $_.proto -eq "https" }
        
        if ($httpTunnel -and $httpTunnel.public_url -ne $previousUrl) {
            Write-Host ""
            Write-Host "üîÑ URL de ngrok cambi√≥, actualizando configuraci√≥n..." -ForegroundColor Cyan
            node update-ngrok-config.js
            return $httpTunnel.public_url
        }
    } catch {
        # Ignorar errores de monitoreo
    }
    
    return $previousUrl
}

# üéØ Mantener el script corriendo y monitorear cambios
$currentUrl = ""
try {
    while ($true) {
        $currentUrl = UpdateConfigOnChange -previousUrl $currentUrl
        Start-Sleep -Seconds 10
    }
} catch {
    Write-Host ""
    Write-Host "üõë Deteniendo ngrok..." -ForegroundColor Red
    $ngrokProcess.Kill()
    Write-Host "‚úÖ ngrok detenido" -ForegroundColor Green
}
